{"version":3,"sources":["store/actions.ts","components/Form.tsx","pages/Auth.tsx","pages/Main.tsx","App.tsx","serviceWorker.ts","utils/auth.ts","store/reducer.ts","utils/API.ts","store/sagas.ts","store/store.ts","index.tsx"],"names":["AuthActionTypes","LogInSuccess","token","action","LOGIN_SUCCESS","LogInError","message","LOGIN_ERROR","CssTextField","withStyles","root","color","borderBottomColor","borderColor","TextField","CssCheckbox","checked","Checkbox","useStyles","makeStyles","input","margin","button","backgroundColor","textTransform","marginTop","marginBottom","Form","onSubmit","error","useState","email","setLogin","password","setPassword","emailError","setEmailError","passwordError","setPasswordError","checkErrors","length","console","log","classes","e","preventDefault","fullWidth","className","id","label","value","onChange","currentTarget","variant","helperText","FormControlLabel","control","style","fill","Button","type","container","height","display","flexDirection","justifyContent","link","textAlign","Links","styled","div","Link","a","Icon","Title","h1","Footer","footer","mapDispatchToProps","LogIn","LOGIN_REQUEST","push","connect","auth","isAuthenticated","errors","useEffect","Container","maxWidth","fontSize","href","Text","p","Main","props","app","exact","path","component","to","store","history","Boolean","window","location","hostname","match","setToken","localStorage","setItem","initialState","getItem","loading","authReducer","state","payload","authenticate","options","user","find","x","undefined","status","result","authorize","watchLogInhRequest","authSaga","call","res","hasOwnProperty","put","takeLatest","all","fork","rootSaga","configureStore","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","router","connectRouter","createRootReducer","applyMiddleware","routerMiddleware","run","createBrowserHistory","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.811f0619.chunk.js","sourcesContent":["import { action } from \"typesafe-actions\";\n\nexport enum AuthActionTypes {\n    LOGIN_REQUEST = \"LOGIN_REQUEST\",\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\n    LOGIN_ERROR = \"LOGIN_ERROR\"\n}\n\nexport interface Options {\n    email: string;\n    password: string;\n}\n\nexport const LogIn = ({ email, password }: Options) =>\n    action(AuthActionTypes.LOGIN_REQUEST, { email, password });\n\nexport const LogInSuccess = (token: string) =>\n    action(AuthActionTypes.LOGIN_SUCCESS, { token });\n\nexport const LogInError = (message: string) =>\n    action(AuthActionTypes.LOGIN_ERROR, message);\n","import React, { useState } from \"react\";\n\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport { Options } from \"../store/actions\";\n\nconst CssTextField = withStyles({\n    root: {\n        \"& label.Mui-focused\": {\n            color: \"#2196F3\"\n        },\n        \"& .MuiInput-underline:after\": {\n            borderBottomColor: \"#2196F3\"\n        },\n        \"& .MuiOutlinedInput-root\": {\n            \"&.Mui-focused fieldset\": {\n                borderColor: \"#2196F3\"\n            }\n        }\n    }\n})(TextField);\n\nconst CssCheckbox = withStyles({\n    root: {\n        \"&$checked\": {\n            color: \"#2196F3\"\n        }\n    },\n    checked: {}\n})(Checkbox);\n\nconst useStyles = makeStyles({\n    input: {\n        margin: \"10px 0\"\n    },\n    button: {\n        backgroundColor: \"#2196F3\",\n        textTransform: \"none\",\n        marginTop: \"30px\",\n        marginBottom: \"15px\",\n        \"&:hover\": {\n            backgroundColor: \"#2F80ED\"\n        }\n    }\n});\n\ninterface Props {\n    onSubmit: (e: Options) => void;\n    error?: string;\n}\n\nconst Form: React.FC<Props> = ({ onSubmit, error }) => {\n    const [email, setLogin] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\");\n    const [passwordError, setPasswordError] = useState(\"\");\n\n    const checkErrors = (email: string, password: string) => {\n        email.length === 0\n            ? setEmailError(\"Обязательное поле!\")\n            : setEmailError(\"\");\n        password.length === 0\n            ? setPasswordError(\"Обязательное поле!\")\n            : setPasswordError(\"\");\n    };\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (email.length > 0 && password.length > 0) {\n            onSubmit && onSubmit({ email, password });\n            setLogin(\"\");\n            setPassword(\"\");\n        } else {\n            checkErrors(email, password);\n        }\n    };\n\n    const handleSetEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setLogin(e.currentTarget.value);\n        checkErrors(email, password);\n    };\n\n    const handleSetPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(e.currentTarget.value);\n        checkErrors(email, password);\n    };\n    console.log(error);\n    const classes = useStyles();\n    return (\n        <form onSubmit={handleSubmit}>\n            <CssTextField\n                fullWidth\n                className={classes.input}\n                id=\"email_input\"\n                label=\"Почта\"\n                error={emailError.length === 0 ? false : true}\n                value={email}\n                onChange={handleSetEmail}\n                variant=\"outlined\"\n                helperText={emailError}\n            />\n            <CssTextField\n                fullWidth\n                className={classes.input}\n                id=\"password_input\"\n                error={passwordError.length === 0 ? false : true}\n                label=\"Пароль\"\n                value={password}\n                onChange={handleSetPassword}\n                variant=\"outlined\"\n                helperText={passwordError}\n            />\n            <FormControlLabel\n                control={\n                    <CssCheckbox\n                        // onChange={handleChange(\"checkedB\")}\n                        style={{ fill: \"black\" }}\n                        color=\"primary\"\n                    />\n                }\n                label=\"Запомнить меня\"\n            />\n            <Button\n                fullWidth\n                className={classes.button}\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                Войти в аккаунт\n            </Button>\n        </form>\n    );\n};\n\nexport default Form;\n","import React, { FC, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { push, Push } from \"connected-react-router\";\n\nimport styled from \"styled-components\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Container } from \"@material-ui/core\";\nimport LockIcon from \"@material-ui/icons/LockOutlined\";\n\nimport { Options, LogIn } from \"../store/actions\";\nimport { AppState } from \"../store/store\";\n\nimport Form from \"../components/Form\";\n\ninterface Props {\n    LogIn: (options: Options) => void;\n    push: Push;\n    isAuthenticated: boolean;\n    error?: string;\n}\n\nconst Auth: FC<Props> = ({ LogIn, push, isAuthenticated, error }) => {\n    useEffect(() => {\n        isAuthenticated && push(\"/\");\n    });\n\n    const handleSubmit = ({ email, password }: Options) => {\n        LogIn({ email, password });\n        push(\"/\");\n    };\n\n    const classes = useStyles();\n    return (\n        <Container className={classes.container} maxWidth=\"xs\">\n            <Icon>\n                <LockIcon style={{ fill: \"white\", fontSize: 25 }} />\n            </Icon>\n            <Title>Вход в аккаунт</Title>\n            <Form error={error} onSubmit={handleSubmit} />\n            <Links>\n                <Link href=\"#\">Забыли пароль?</Link>\n                <Link className={classes.link} href=\"#\">\n                    Еще нет аккаунта? Регистрация\n                </Link>\n            </Links>\n            <Footer>Copyright@ Ваш сайт 2020.</Footer>\n        </Container>\n    );\n};\n\nconst useStyles = makeStyles({\n    container: {\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\"\n    },\n    link: {\n        textAlign: \"right\"\n    }\n});\n\nconst Links = styled.div`\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 60px;\n`;\nconst Link = styled.a`\n    color: #2196f3;\n    font-size: 14px;\n    text-decoration: none;\n    max-width: 215px;\n    min-width: 130px;\n    &:hover {\n        text-decoration: underline;\n    }\n`;\nconst Icon = styled.div`\n    align-items: center;\n    background-color: #e10050;\n    border-radius: 40px;\n    display: flex;\n    justify-content: center;\n    height: 40px;\n    margin: 0 auto;\n    width: 40px;\n`;\nconst Title = styled.h1`\n    font: 300 24px/18px Roboto, sans-serif;\n    margin-bottom: 20px;\n    text-align: center;\n`;\nconst Footer = styled.footer`\n    color: rgba(0, 0, 0, 0.54);\n    font: 300 14px/18px Roboto, sans-serif;\n    text-align: center;\n`;\n\nconst mapStateToProps = ({ auth }: AppState) => ({\n    isAuthenticated: auth.isAuthenticated,\n    error: auth.errors\n});\nconst mapDispatchToProps = { LogIn, push };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React from \"react\";\n\nimport StarIcon from \"@material-ui/icons/Star\";\nimport styled from \"styled-components\";\n\nconst Main: React.FC<{}> = () => {\n    return (\n        <>\n            <Title>Главная страница</Title>\n            <Text>\n                <StarIcon />\n                Авторизация прошла успешно\n                <StarIcon />\n            </Text>\n        </>\n    );\n};\n\nconst Title = styled.h1`\n    color: #2196f3;\n    text-align: center;\n    font-size: 26px;\n    margin-top: 30px;\n`;\nconst Text = styled.p`\n    color: #2196f3;\n    text-align: center;\n    font-size: 18px;\n    margin-top: 30px;\n`;\n\nexport default Main;\n","import React from \"react\";\nimport { Store } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { connect } from \"react-redux\";\n\nimport { History } from \"history\";\nimport { AppState } from \"./store/store\";\n\nimport Auth from \"./pages/Auth\";\nimport Main from \"./pages/Main\";\n\ninterface Props {\n    history: History;\n    store: Store<AppState>;\n    isAuthenticated: boolean | null;\n}\n\nconst App: React.SFC<Props> = props => {\n    const app =\n        props.isAuthenticated === true ? (\n            <Route exact path=\"/\" component={Main} />\n        ) : (\n            <Route path=\"/\">\n                <Redirect to=\"/login\" />\n            </Route>\n        );\n    return (\n        <Provider store={props.store}>\n            <ConnectedRouter history={props.history}>\n                <Switch>\n                    <Route path=\"/login\">\n                        <Auth />\n                    </Route>\n                    {app}\n                </Switch>\n            </ConnectedRouter>\n        </Provider>\n    );\n};\n\nconst mapStateToProps = ({ auth }: AppState) => ({\n    isAuthenticated: auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const getToken = (): string | null => {\n    return localStorage.getItem(\"jwt\");\n};\n\nexport const setToken = (token: string) => {\n    localStorage.setItem(\"jwt\", token);\n};\n\nexport const isAuthenticated = (): boolean => {\n    // localStorage.removeItem(\"jwt\");\n    return Boolean(localStorage.getItem(\"jwt\"));\n};\n","import { Reducer } from \"redux\";\nimport { AuthActionTypes } from \"./actions\";\nimport { getToken, setToken, isAuthenticated } from \"../utils/auth\";\n\nexport interface AuthState {\n    readonly loading: boolean;\n    readonly isAuthenticated: boolean;\n    readonly token: string | null;\n    readonly errors?: string;\n}\n\nexport const initialState: AuthState = {\n    token: getToken(),\n    isAuthenticated: isAuthenticated(),\n    loading: false\n};\n\nexport const authReducer: Reducer<AuthState> = (\n    state = initialState,\n    action\n) => {\n    switch (action.type) {\n        case AuthActionTypes.LOGIN_REQUEST: {\n            return { ...state, loading: true };\n        }\n        case AuthActionTypes.LOGIN_SUCCESS: {\n            setToken(action.payload.token.token);\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: true,\n                loading: false\n            };\n        }\n        case AuthActionTypes.LOGIN_ERROR: {\n            return { ...state, errors: action.payload, loading: false };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n","import { Options } from \"../store/actions\";\n\nexport function authenticate(options: Options) {\n    const { email, password } = options;\n    const data = [\n        { email: \"first@mail.ru\", password: \"first\" },\n        { email: \"second@mail.ru\", password: \"second\" }\n    ];\n    const user = data.find(x => x.email === email);\n\n    if (user === undefined) {\n        return {\n            status: 400,\n            error: \"Пользователь не найден\"\n        };\n    } else if (user !== undefined && user.password !== password) {\n        return {\n            status: 400,\n            error: \"Пароль неверный\"\n        };\n    } else {\n        return {\n            status: 200,\n            result: {\n                user: email,\n                token: \"86fasfgfsogHGad\"\n            }\n        };\n    }\n}\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { AnyAction } from \"redux\";\n\nimport { authenticate } from \"../utils/API\";\nimport { LogInSuccess, LogInError } from \"./actions\";\nimport { AuthActionTypes } from \"./actions\";\n\nfunction* authorize({ payload }: AnyAction) {\n    try {\n        const res = yield call(authenticate, payload);\n        if (res.hasOwnProperty(\"status\") && res.status === 200) {\n            const token = res.result;\n            yield put(LogInSuccess(token));\n        } else {\n            yield put(LogInError(res.error));\n        }\n    } catch (error) {\n        yield put(LogInError(error));\n    }\n}\nfunction* watchLogInhRequest() {\n    yield takeLatest(AuthActionTypes.LOGIN_REQUEST, authorize);\n}\n\nfunction* authSaga() {\n    yield all([fork(watchLogInhRequest)]);\n}\n\nexport default authSaga;\n","import { Store, createStore, applyMiddleware, combineReducers } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport {\n    connectRouter,\n    RouterState,\n    routerMiddleware\n} from \"connected-react-router\";\nimport { all, fork } from \"redux-saga/effects\";\nimport { History } from \"history\";\n\nimport { authReducer, AuthState } from \"./reducer\";\nimport authSaga from \"./sagas\";\n\nexport interface AppState {\n    router: RouterState;\n    auth: AuthState;\n}\n\nexport const createRootReducer = (history: History) =>\n    combineReducers({\n        router: connectRouter(history),\n        auth: authReducer\n    });\n\nexport function* rootSaga() {\n    yield all([fork(authSaga)]);\n}\n\nconst configureStore = (history: History): Store<AppState> => {\n    const initialState = {};\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store = createStore(\n        createRootReducer(history),\n        initialState,\n        applyMiddleware(routerMiddleware(history), sagaMiddleware)\n    );\n\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n};\nexport default configureStore;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/store\";\n\nconst history = createBrowserHistory();\nconst store = configureStore(history);\n\nrender(\n    <App history={history} store={store} />,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}